# search
- how to express `search ... where ...`
- search within content (file or response)
  - filter results from context queries (eg file = search context.source file "$@") to replace defining recursion level
    - you care to filter results based on who generated them, not only what they contain (which could be faked)
  - honer defaultPathQuery to avoid traversing directories (following references)
- search ^/<dir> should only search in that directory?
- order by custom order in .search.order in each directories
- search in . before other directories
  - use inode map to avoid searching in . twice
- support case insensitive search
- interactively pick one of several if multiple
- order search results
  - order files based on "relevance" (eg. a query "foo" should first return names matching query entirely: ["foo", "abcfoodef"])
- store search results in temporary files to be able to access the content again

# transform
- head/tail for x milliseconds
- order by last modified
- order by most used
- `get` use cat or curl or open depending on type
- `echo google.com | transform response`.  transforms are functions that all input and can generate multiple outputs
- research how to convert an object into a variety of outputs.
  - consume a graph (from csv, ttl) to node-edges or triples or (p(s,o))
    or should we just do `reduce graph.triples`
- interpret input (with hints as to nature) then push results onto output
- see http://highlandjs.org/#consume

- $ get people | reduce graph | transform triples

f='./test.txt'
stream([f]).map(content).reduce(graph).transform(graph.nodeEdges)

perhaps relates to the concept of type hierarchy (starting to take form in search?)
- reduce accepts n items or n seconds worth
- use "reduce one" to display a selector and let the user pick on
- "reduce join, sort, unique" while retaining context so that you can get a list of unique items, while retaining where they came from. eg: "files duration:1000 data/people | map content  | sort  -u" replaced with "... | map augment content | parse content | reduce join sort unique"
- join streams, so that I can merge two resources together, so that I can merge remote resources
